create database Grocery_Store_Managment;
use Grocery_Store_Managment;
-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);

-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

select * from categories;
select * from customers;
select * from supplier;
select * from employees;
select * from orders;
select * from order_details;
select * from products;

-- Analysis Questions
-- 1️. Customer Insights
-- Gain an understanding of customer engagement and purchasing behavior.
-- How many unique customers have placed orders?
select count(distinct e.emp_name) as no_of_unique_customers
from employees e 
join orders o 
on e.emp_id=o.emp_id;

-- Which customers have placed the highest number of orders?
select e.emp_name,count(ord_id) as no_of_orders
from employees e 
join orders o 
on e.emp_id=o.emp_id
group by e.emp_name
order by no_of_orders desc
limit 1;

-- What is the total and average purchase value per customer?
select e.emp_name,count(ord_id) as no_of_orders,avg(ord_id) as avg_orders
from employees e 
join orders o 
on e.emp_id=o.emp_id
group by e.emp_name
order by no_of_orders desc;

-- Who are the top 5 customers by total purchase amount?
select e.emp_name,count(ord_id) as no_of_orders
from employees e 
join orders o 
on e.emp_id=o.emp_id
group by e.emp_name
order by no_of_orders desc
limit 5;

-- 2. Product Performance
-- Evaluate how well products are performing in terms of sales and revenue.
-- How many products exist in each category?
select c.cat_name,count(prod_id) as product_count
from categories c
join products p
on c.cat_id=p.cat_id
group by cat_name;

-- What is the average price of products by category?
select c.cat_name,avg(p.price) as avg_product_price
from categories c
join products p
on c.cat_id=p.cat_id
group by cat_name;

-- Which products have the highest total sales volume (by quantity)?
select p.prod_name,sum(od.quantity) as total_sales
from products p
join order_details od
on p.prod_id=od.prod_id
group by prod_name
order by total_sales desc
limit 1;

-- What is the total revenue generated by each product?
select p.prod_name,sum(od.total_price) as total_revenue
from products p
join order_details od
on p.prod_id=od.prod_id
group by p.prod_name;

-- How do product sales vary by category and supplier?
select c.cat_name,s.sup_name,sum(od.total_price) as total_sales
from categories c 
join products p on c.cat_id=p.cat_id
join supplier s on p.sup_id=s.sup_id
join order_details od on od.prod_id=p.prod_id
group by s.sup_name,c.cat_name;

-- 3. Sales and Order Trends
-- Analyze business performance through orders and revenue over time.
-- How many orders have been placed in total?
select count(ord_id) no_of_orders  
from orders;

-- What is the average value per order?
select avg(total_price) from order_details;
			-- Or --
select avg(od.total_price) avg_value_per_order
from order_details od
join orders o 
on od.ord_id=o.ord_id;

-- On which dates were the most orders placed?
select distinct order_date,count(ord_id) as no_of_orders
from orders
group by order_date
order by no_of_orders desc
limit 2;

-- What are the monthly trends in order volume and revenue?
UPDATE orders
SET order_date = STR_TO_DATE(order_date, '%m/%d/%Y');

select date_format(o.order_date,'%Y-%m') as month_wise,
sum(od.quantity) monthly_quantities,
sum(od.total_price) monthly_total_price
from orders o 
join order_details od 
on o.ord_id=od.ord_id
group by month_wise
order by month_wise;

-- How do order patterns vary across weekdays and weekends?
SELECT 
    CASE 
        WHEN DAYOFWEEK(o.order_date) IN (1, 7) THEN 'Weekend'  -- 1 = Sunday, 7 = Saturday
        ELSE 'Weekday'
    END AS day_type,
    COUNT(o.ord_id) AS total_orders,
    SUM(total_price) AS total_revenue
FROM orders o 
join order_details od
GROUP BY day_type;

-- 4️. Supplier Contribution
-- Identify the most active and profitable suppliers.
-- How many suppliers are there in the database?
select count(sup_name) no_of_suppliers from supplier; 

-- Which supplier provides the most products?
select s.sup_name,sum(p.prod_id) no_of_products
from supplier s 
join products p
on s.sup_id=p.sup_id
group by s.sup_name
order by no_of_products desc
limit 1;

-- What is the average price of products from each supplier?
select s.sup_name,avg(p.price) avg_price_of_product
from supplier s 
join products p
on s.sup_id=p.sup_id
group by s.sup_name;

-- Which suppliers contribute the most to total product sales (by revenue)?
select s.sup_name,sum(od.total_price) as total_revenue
from supplier s
join products p on s.sup_id=p.sup_id
join order_details od on od.prod_id=p.prod_id
group by sup_name
order by total_revenue desc
limit 1;

-- 5️. Employee Performance
-- Assess how employees are handling and influencing sales.
-- How many employees have processed orders?
SELECT emp_id,COUNT(*) AS total_orders_processed
FROM orders
GROUP BY emp_id
ORDER BY total_orders_processed DESC;

-- Which employees have handled the most orders?
select e.emp_name,count(o.ord_id) no_of_orders
from employees e 
join orders o 
on e.emp_id=o.emp_id
group by e.emp_name
order by no_of_orders desc
limit 1;

-- What is the total sales value processed by each employee?
select e.emp_name,sum(od.total_price) as total_sales
from employees e 
join orders o on e.emp_id=o.emp_id
join order_details od on o.ord_id=od.ord_id
group by e.emp_name;

-- What is the average order value handled per employee?
select e.emp_name,avg(od.total_price) as avg_order_value
from employees e 
join orders o on e.emp_id=o.emp_id
join order_details od on o.ord_id=od.ord_id
group by e.emp_name;

-- 6️. Order Details Deep Dive
-- Explore item-level sales patterns and pricing behavior.
-- What is the relationship between quantity ordered and total price?
select quantity,total_price from order_details;

-- What is the average quantity ordered per product?
select p.prod_name,avg(od.quantity) as avg_quantity
from products p
join order_details od
on p.prod_id=od.prod_id
group by p.prod_name;

-- How does the unit price vary across products and orders?
SELECT o.ord_id,p.prod_name,od.each_price unit_price
FROM orders o
JOIN order_details od ON o.ord_id = od.ord_id
JOIN products p ON od.prod_id = p.prod_id
ORDER BY o.ord_id, od.each_price DESC;




